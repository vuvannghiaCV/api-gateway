version: "3"

services:

  database:
    build:
      context: "./database"
      dockerfile: "Dockerfile"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KONG_PASSWORD_DATABASE: ${KONG_PASSWORD_DATABASE}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT-5432}:${POSTGRES_PORT-5432}"

  api_gateway:
    build:
      context: "./api_gateway"
      dockerfile: "Dockerfile"
    user: root
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    links:
      - "database:database"
    environment:
      KONG_SSL: "on"
      KONG_SSL_CERT: /etc/kong/ssl/localhost.crt
      KONG_SSL_CERT_KEY: /etc/kong/ssl/localhost.key

      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr

      KONG_DATABASE: postgres # TYPE: postgres 
      KONG_PG_HOST: database
      KONG_PG_USER: kong # VALUE CONSTANT DEFAULT
      KONG_PG_DATABASE: kong # VALUE CONSTANT DEFAULT
      KONG_PG_PASSWORD: ${KONG_PASSWORD_DATABASE}

      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    ports:
      - "8443:8443"

  manager_api_gateway:
    build:
      context: "./api_gateway"
      dockerfile: "./manager/Dockerfile"
    environment:
      NODE_ENV: "production"
      SSL_CRT_PATH: "/certs/localhost.crt"
      SSL_KEY_PATH: "/certs/localhost.key"
      KONGA_SEED_USER_DATA_SOURCE_FILE: "/app/kongadata/uploads/user.data"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: "/app/kongadata/uploads/node.data"
      KONG_MANAGER_ADMIN_PASSWORD: ${KONG_MANAGER_ADMIN_PASSWORD}
    ports:
      - "1337:1337"

  microservices_template:
    env_file:
      - ".env"
    depends_on:
      api_gateway:
        condition: service_healthy
